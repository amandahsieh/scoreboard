// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scoreboard.sql

package db

import (
	"context"
)

const createScoreboard = `-- name: CreateScoreboard :one
INSERT INTO scoreboards (name)
VALUES ($1)
    RETURNING id, name, createdat, updatedat
`

func (q *Queries) CreateScoreboard(ctx context.Context, name string) (Scoreboard, error) {
	row := q.db.QueryRow(ctx, createScoreboard, name)
	var i Scoreboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getAllScoreboards = `-- name: GetAllScoreboards :many
SELECT id, name, createdat, updatedat FROM scoreboards ORDER BY id
`

func (q *Queries) GetAllScoreboards(ctx context.Context) ([]Scoreboard, error) {
	rows, err := q.db.Query(ctx, getAllScoreboards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scoreboard
	for rows.Next() {
		var i Scoreboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoreboardByID = `-- name: GetScoreboardByID :one
SELECT id, name, createdat, updatedat FROM scoreboards WHERE id = $1
`

func (q *Queries) GetScoreboardByID(ctx context.Context, id int32) (Scoreboard, error) {
	row := q.db.QueryRow(ctx, getScoreboardByID, id)
	var i Scoreboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateScoreboard = `-- name: UpdateScoreboard :one
UPDATE scoreboards
SET name = $2, updatedAt = NOW()
WHERE id = $1
    RETURNING id, name, createdat, updatedat
`

type UpdateScoreboardParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateScoreboard(ctx context.Context, arg UpdateScoreboardParams) (Scoreboard, error) {
	row := q.db.QueryRow(ctx, updateScoreboard, arg.ID, arg.Name)
	var i Scoreboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
